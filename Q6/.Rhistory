count_table <- df(n_classes)
classes <- names(count_table)
return(classes[which.max(count_table)])
}
getPred<-function(x,k){
distance=vector()
age<-x[1]
loan<-x[2]
length(distance)=nrow(table)
for(i in 1:nrow(table))
{
distance[i]=sqrt(((age-table[i,1])^2)+((loan-table[i,2])^2))
}
temp_table <- table
temp_table$dist <- distance
temp_table <- temp_table[order(temp_table$dist),]
n_classes <- temp_table[1:k,3]
count_table <- table(n_classes)
classes <- names(count_table)
return(classes[which.max(count_table)])
}
x_test <- data.frame("Age"=c(5,20,80),"Loan"=c(5,10000,300000))
pred1 <- apply(x_test,1,function(x) getPred(x,1))
pred1
pred2 <- apply(x_test,1,function(x) getPred(x,2))
pred2
pred3 <- apply(x_test,1,function(x) getPred(x,3))
df <- read.csv('ageloans.csv', header = TRUE)
df
predict <- function(x,k){
dis = vector()
age <- x[1]
loan <- x[2]
length(dis) = nrow(df)
for(i in 1:nrow(df)){
dis[i] <= sqrt(((age - df[i,1])^2 - (loan - df[i,2])^2))
}
temp <- df
temp$dist <- dis
temp <- temp[order(temp$dist),]
n_classes <- temp[1:k,3]
count_table <- df(n_classes)
classes <- names(count_table)
return(classes[which.max(count_table)])
}
x_test <- data.frame("Age"=c(5,20,80),"Loan"=c(5,10000,300000))
pred1 <- apply(x_test,1,function(x) predict(x,1))
table <- read.csv('ageloans.csv', header = TRUE)
table
predict <- function(x,k){
dis = vector()
age <- x[1]
loan <- x[2]
length(dis) = nrow(table)
for(i in 1:nrow(table)){
dis[i] <= sqrt(((age - table[i,1])^2 - (loan - table[i,2])^2))
}
temp <- table
temp$dist <- dis
temp <- temp[order(temp$dist),]
n_classes <- temp[1:k,3]
count_table <- table(n_classes)
classes <- names(count_table)
return(classes[which.max(count_table)])
}
getPred<-function(x,k){
distance=vector()
age<-x[1]
loan<-x[2]
length(distance)=nrow(table)
for(i in 1:nrow(table))
{
distance[i]=sqrt(((age-table[i,1])^2)+((loan-table[i,2])^2))
}
temp_table <- table
temp_table$dist <- distance
temp_table <- temp_table[order(temp_table$dist),]
n_classes <- temp_table[1:k,3]
count_table <- table(n_classes)
classes <- names(count_table)
return(classes[which.max(count_table)])
}
x_test <- data.frame("Age"=c(5,20,80),"Loan"=c(5,10000,300000))
pred1 <- apply(x_test,1,function(x) getPred(x,1))
pred1
pred2 <- apply(x_test,1,function(x) getPred(x,2))
pred2
pred3 <- apply(x_test,1,function(x) getPred(x,3))
pred3
#Library Function
library(class)
y_train <- table[,3]
x_train <- table[,1:2]
pred_lib1 <- knn(train = x_train,test=x_test,cl=y_train, k = 1)
pred_lib1
pred_lib2 <- knn(train = x_train,test=x_test,cl=y_train, k = 2)
pred_lib2
pred_lib3 <- knn(train = x_train,test=x_test,cl=y_train, k = 3)
pred_lib3
table <- read.csv('ageloans.csv', header = TRUE)
table
predict <- function(x,k){
dis = vector()
age <- x[1]
loan <- x[2]
length(dis) = nrow(table)
for(i in 1:nrow(table)){
dis[i] <- sqrt(((age - table[i,1])^2 - (loan - table[i,2])^2))
}
temp <- table
temp$dist <- dis
temp <- temp[order(temp$dist),]
n_classes <- temp[1:k,3]
count_table <- table(n_classes)
classes <- names(count_table)
return(classes[which.max(count_table)])
}
getPred<-function(x,k){
distance=vector()
age<-x[1]
loan<-x[2]
length(distance)=nrow(table)
for(i in 1:nrow(table))
{
distance[i]=sqrt(((age-table[i,1])^2)+((loan-table[i,2])^2))
}
temp_table <- table
temp_table$dist <- distance
temp_table <- temp_table[order(temp_table$dist),]
n_classes <- temp_table[1:k,3]
count_table <- table(n_classes)
classes <- names(count_table)
return(classes[which.max(count_table)])
}
x_test <- data.frame("Age"=c(5,20,80),"Loan"=c(5,10000,300000))
pred1 <- apply(x_test,1,function(x) predict(x,1))
pred1
pred2 <- apply(x_test,1,function(x) predict(x,2))
pred2
pred3 <- apply(x_test,1,function(x) predict(x,3))
table <- read.csv('ageloans.csv', header = TRUE)
table
predict <- function(x,k){
dis = vector()
age <- x[1]
loan <- x[2]
length(dis) = nrow(table)
for(i in 1:nrow(table)){
dis[i] = sqrt(((age - table[i,1])^2 - (loan - table[i,2])^2))
}
temp <- table
temp$dist <- dis
temp <- temp[order(temp$dist),]
n_classes <- temp[1:k,3]
count_table <- table(n_classes)
classes <- names(count_table)
return(classes[which.max(count_table)])
}
getPred<-function(x,k){
distance=vector()
age<-x[1]
loan<-x[2]
length(distance)=nrow(table)
for(i in 1:nrow(table))
{
distance[i]=sqrt(((age-table[i,1])^2)+((loan-table[i,2])^2))
}
temp_table <- table
temp_table$dist <- distance
temp_table <- temp_table[order(temp_table$dist),]
n_classes <- temp_table[1:k,3]
count_table <- table(n_classes)
classes <- names(count_table)
return(classes[which.max(count_table)])
}
x_test <- data.frame("Age"=c(5,20,80),"Loan"=c(5,10000,300000))
pred1 <- apply(x_test,1,function(x) predict(x,1))
pred1
pred2 <- apply(x_test,1,function(x) predict(x,2))
pred2
pred3 <- apply(x_test,1,function(x) predict(x,3))
pred3
#Library Function
library(class)
table <- read.csv('ageloans.csv', header = TRUE)
table
predict <- function(x,k){
dis = vector()
age <- x[1]
loan <- x[2]
length(dis) = nrow(table)
for(i in 1:nrow(table)){
dis[i] = sqrt(((age - table[i,1])^2) + ((loan - table[i,2])^2))
}
temp <- table
temp$dist <- dis
temp <- temp[order(temp$dist),]
n_classes <- temp[1:k,3]
count_table <- table(n_classes)
classes <- names(count_table)
return(classes[which.max(count_table)])
}
getPred<-function(x,k){
distance=vector()
age<-x[1]
loan<-x[2]
length(distance)=nrow(table)
for(i in 1:nrow(table))
{
distance[i]=sqrt(((age-table[i,1])^2)+((loan-table[i,2])^2))
}
temp_table <- table
temp_table$dist <- distance
temp_table <- temp_table[order(temp_table$dist),]
n_classes <- temp_table[1:k,3]
count_table <- table(n_classes)
classes <- names(count_table)
return(classes[which.max(count_table)])
}
x_test <- data.frame("Age"=c(5,20,80),"Loan"=c(5,10000,300000))
pred1 <- apply(x_test,1,function(x) predict(x,1))
pred1
pred2 <- apply(x_test,1,function(x) predict(x,2))
pred2
pred3 <- apply(x_test,1,function(x) predict(x,3))
pred3
#Library Function
library(class)
y_train <- table[,3]
x_train <- table[,1:2]
pred_lib1 <- knn(train = x_train,test=x_test,cl=y_train, k = 1)
pred_lib1
pred_lib2 <- knn(train = x_train,test=x_test,cl=y_train, k = 2)
pred_lib2
pred_lib3 <- knn(train = x_train,test=x_test,cl=y_train, k = 3)
pred_lib3
library(grid)
library(gridExtra)
par(mfrow=c(2,3))
result1 <- data.frame("Age"=x_test[,1],"Loan"=x_test[,2],"Prediction"=pred1,"Prediction_Lib"=pred_lib1)
result2 <- data.frame("Age"=x_test[,1],"Loan"=x_test[,2],"Prediction"=pred2,"Prediction_Lib"=pred_lib2)
result3 <- data.frame("Age"=x_test[,1],"Loan"=x_test[,2],"Prediction"=pred3,"Prediction_Lib"=pred_lib3)
grid.arrange(tableGrob("k=1"),tableGrob(result1),tableGrob("k=2"),tableGrob(result2),tableGrob("k=3"),tableGrob(result3))
table <- read.csv('ageloans.csv', header = TRUE)
table
predict <- function(x,k){
dis = vector()
age <- x[1]
loan <- x[2]
length(dis) = nrow(table)
for(i in 1:nrow(table)){
dis[i] = sqrt(((age - table[i,1])^2) + ((loan - table[i,2])^2))
}
temp <- table
temp$dist <- dis
temp <- temp[order(temp$dist),]
n_classes <- temp[1:k,3]
count_table <- table(n_classes)
classes <- names(count_table)
return(classes[which.max(count_table)])
}
x_test <- data.frame("Age"=c(5,20,80),"Loan"=c(5,10000,300000))
pred1 <- apply(x_test,1,function(x) predict(x,1))
pred1
pred2 <- apply(x_test,1,function(x) predict(x,2))
pred2
pred3 <- apply(x_test,1,function(x) predict(x,3))
pred3
#Library Function
library(class)
y_train <- table[,3]
x_train <- table[,1:2]
pred_lib1 <- knn(train = x_train,test=x_test,cl=y_train, k = 1)
pred_lib1
pred_lib2 <- knn(train = x_train,test=x_test,cl=y_train, k = 2)
pred_lib2
pred_lib3 <- knn(train = x_train,test=x_test,cl=y_train, k = 3)
pred_lib3
library(class)
df = data.frame(
age = c(25,35,30,20,27,30,32,22,26,500),
loan = c(10000,20000,10000,15000,12000,17000,35000,28000,19000,3000000),
default = c("Y", "N", "Y", "Y", "N", "Y", "N", "N", "Y","Y")
)
df
myKnn <- function(x,k){
distance <- vector()
age <- as.numeric(x[1])
loan <- as.numeric(x[2])
length(distance) = nrow(df)
for(i in 1:nrow(df)){
distance[i] <- sqrt((age-df[i,1])^2+(loan-df[i,2])^2)
}
temp <- df
temp$dist <- distance
temp <- temp[order(temp$dist), ]
cnt <- table(temp[i:k,3])
classes <- names(cnt)
pred <- classes[which.max(cnt)]
return(pred)
}
df$pred1 <- apply(df,1,function(x) myKnn(x,1))
df$pred2 <- apply(df,1,function(x) myKnn(x,2))
df$pred3 <- apply(df,1,function(x) myKnn(x,3))
df
myKnn <- function(x,k){
distance <- vector()
age <- as.numeric(x[1])
loan <- as.numeric(x[2])
length(distance) = nrow(df)
for(i in 1:nrow(df)){
distance[i] <- sqrt(((age-df[i,1])^2)+((loan-df[i,2])^2))
}
temp <- df
temp$dist <- distance
temp <- temp[order(temp$dist), ]
cnt <- table(temp[i:k,3])
classes <- names(cnt)
pred <- classes[which.max(cnt)]
return(pred)
}
df$pred1 <- apply(df,1,function(x) myKnn(x,1))
df$pred2 <- apply(df,1,function(x) myKnn(x,2))
df$pred3 <- apply(df,1,function(x) myKnn(x,3))
df
myKnn <- function(x, k) {
distance = vector()
age <- as.numeric(x[1])
loan <- as.numeric(x[2])
length(distance) = nrow(df)
for(i in 1:nrow(df)) {
distance[i] = sqrt(((age - df[i, 1])^2) + ((loan - df[i, 2])^2))
}
tmp <- df
tmp$dist = distance
tmp <- tmp[order(tmp$dist),]
cnt <- table(tmp[1:k, 3])
classes <- names(cnt)
pred <- classes[which.max(cnt)]
return(pred)
}
df$pred1 <- apply(df,1,function(x) myKnn(x,1))
df$pred2 <- apply(df,1,function(x) myKnn(x,2))
df$pred3 <- apply(df,1,function(x) myKnn(x,3))
df
y <- df[,3]
x <- df[,1:2]
df$predk1_builtin <- knn(train = x, cl = y, test = df[,1:2], k = 1)
df$predk2_builtin <- knn(train = x, cl = y, test = df[,1:2], k = 2)
df$predk3_builtin <- knn(train = x, cl = y, test = df[,1:2], k = 3)
df
library(class)
df = data.frame(
age = c(25,35,30,20,27,30,32,22,26,500),
loan = c(10000,20000,10000,15000,12000,17000,35000,28000,19000,3000000),
default = c("Y", "N", "Y", "Y", "N", "Y", "N", "N", "Y","Y")
)
df
myKnn <- function(x,k){
distance <- vector()
age <- as.numeric(x[1])
loan <- as.numeric(x[2])
length(distance) = nrow(df)
for(i in 1:nrow(df)){
distance[i] <- sqrt(((age-df[i,1])^2)+((loan-df[i,2])^2))
}
temp <- df
temp$dist <- distance
temp <- temp[order(temp$dist), ]
cnt <- table(temp[i:k,3])
classes <- names(cnt)
pred <- classes[which.max(cnt)]
return(pred)
}
df$pred1 <- apply(df,1,function(x) myKnn(x,1))
df$pred2 <- apply(df,1,function(x) myKnn(x,2))
df$pred3 <- apply(df,1,function(x) myKnn(x,3))
df
y <- df[,3]
x <- df[,1:2]
df$predk1_builtin <- knn(train = x, cl = y, test = df[,1:2], k = 1)
df$predk2_builtin <- knn(train = x, cl = y, test = df[,1:2], k = 2)
df$predk3_builtin <- knn(train = x, cl = y, test = df[,1:2], k = 3)
df
library(class)
df = data.frame(
age = c(25,35,30,20,27,30,32,22,26,500),
loan = c(10000,20000,10000,15000,12000,17000,35000,28000,19000,3000000),
default = c("Y", "N", "Y", "Y", "N", "Y", "N", "N", "Y","Y")
)
df
myKnn <- function(x, k) {
distance = vector()
age <- as.numeric(x[1])
loan <- as.numeric(x[2])
length(distance) = nrow(df)
for(i in 1:nrow(df)) {
distance[i] = sqrt(((age - df[i, 1])^2) + ((loan - df[i, 2])^2))
}
tmp <- df
tmp$dist = distance
tmp <- tmp[order(tmp$dist),]
cnt <- table(tmp[1:k, 3])
classes <- names(cnt)
pred <- classes[which.max(cnt)]
return(pred)
}
df$pred1 <- apply(df,1,function(x) myKnn(x,1))
df$pred2 <- apply(df,1,function(x) myKnn(x,2))
df$pred3 <- apply(df,1,function(x) myKnn(x,3))
df
y <- df[,3]
x <- df[,1:2]
df$predk1_builtin <- knn(train = x, cl = y, test = df[,1:2], k = 1)
df$predk2_builtin <- knn(train = x, cl = y, test = df[,1:2], k = 2)
df$predk3_builtin <- knn(train = x, cl = y, test = df[,1:2], k = 3)
df
library(class)
df = data.frame(
age = c(25,35,30,20,27,30,32,22,26,500),
loan = c(10000,20000,10000,15000,12000,17000,35000,28000,19000,3000000),
default = c("Y", "N", "Y", "Y", "N", "Y", "N", "N", "Y","Y")
)
df
myKnn <- function(x,k){
distance = vector()
age <- as.numeric(x[1])
loan <- as.numeric(x[2])
length(distance) = nrow(df)
for(i in 1:nrow(df)){
distance[i] = sqrt(((age-df[i,1])^2)+((loan-df[i,2])^2))
}
temp <- df
temp$dist = distance
temp <- temp[order(temp$dist), ]
cnt <- table(temp[1:k,3])
classes <- names(cnt)
pred <- classes[which.max(cnt)]
return(pred)
}
df$pred1 <- apply(df,1,function(x) myKnn(x,1))
df$pred2 <- apply(df,1,function(x) myKnn(x,2))
df$pred3 <- apply(df,1,function(x) myKnn(x,3))
df
library(class)
df = data.frame(
age = c(25,35,30,20,27,30,32,22,26,500),
loan = c(10000,20000,10000,15000,12000,17000,35000,28000,19000,3000000),
default = c("Y", "N", "Y", "Y", "N", "Y", "N", "N", "Y","Y")
)
df
myKnn <- function(x,k){
distance = vector()
age <- as.numeric(x[1])
loan <- as.numeric(x[2])
length(distance) = nrow(df)
for(i in 1:nrow(df))
distance[i] = sqrt(((age - df[i,1])^2) + ((loan - df[i,2])^2))
temp <- df
temp$dist = distance
temp <- temp[order(temp$dist),]
cnt <- table(temp[1:k,3])
classes <- names(cnt)
pred <- classes[which.max(cnt)]
return(pred)
}
df$pred1 <- apply(df,1,function(x) myKnn(x,1))
df$pred2 <- apply(df,1,function(x) myKnn(x,2))
df$pred3 <- apply(df,1,function(x) myKnn(x,3))
df
y <- df[,3]
x <- df[,1:2]
df$predk1_builtin <- knn(train = x, cl = y, test = df[,1:2], k = 1)
df$predk2_builtin <- knn(train = x, cl = y, test = df[,1:2], k = 2)
df$predk3_builtin <- knn(train = x, cl = y, test = df[,1:2], k = 3)
df
myKnn <- function(x,k){
distance = vector()
age <- as.numeric(x[1])
age
loan <- as.numeric(x[2])
loan
length(distance) = nrow(df)
for(i in 1:nrow(df))
distance[i] = sqrt(((age - df[i,1])^2) + ((loan - df[i,2])^2))
temp <- df
temp$dist = distance
temp <- temp[order(temp$dist),]
cnt <- table(temp[1:k,3])
classes <- names(cnt)
pred <- classes[which.max(cnt)]
return(pred)
}
df$pred1 <- apply(df,1,function(x) myKnn(x,1))
myKnn <- function(x,k){
distance = vector()
age <- as.numeric(x[1])
print(age)
loan <- as.numeric(x[2])
print(loan)
length(distance) = nrow(df)
for(i in 1:nrow(df))
distance[i] = sqrt(((age - df[i,1])^2) + ((loan - df[i,2])^2))
temp <- df
temp$dist = distance
temp <- temp[order(temp$dist),]
cnt <- table(temp[1:k,3])
classes <- names(cnt)
pred <- classes[which.max(cnt)]
return(pred)
}
df$pred1 <- apply(df,1,function(x) myKnn(x,1))
